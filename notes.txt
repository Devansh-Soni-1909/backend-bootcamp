for dev dependency use -D
Nodemon is a tool that helps with auto-reloading your Node.js application whenever you make changes to the code
mostly for middlewares we use app.use()

Middleware helps you handle common tasks during a request-response lifecycle without repeating code.

🚗 Real-World Analogy: A Toll Booth Highway
🛣 Scenario:
Imagine you're driving your car on a highway that leads to a destination (just like a client sending a request to a server).

Before you reach your destination (i.e., get the final response), you must pass through several checkpoints (middlewares) on the road:

💡 Real-World Checkpoints ≈ Middleware
Checkpoint on the Road	Equivalent Express Middleware	Purpose
🚧 Toll Booth	express.json()	Checks if your vehicle (request body) is valid
👮 Security Check	Authentication Middleware	Checks if you're authorized to enter
🎫 Ticket Validation	Authorization Middleware	Checks if you're allowed to go to a VIP area
🧾 Receipt Printing	Logger Middleware	Logs details about the journey
🧰 Road Repair Detour	Error Handling Middleware	Redirects or shows an error if road is broken
🏁 Destination	Final Route Handler	Sends the final response


HTTP response status codes
HTTP response status codes indicate whether a specific HTTP request has been successfully completed. Responses are grouped in five classes:

Informational responses (100 – 199)
Successful responses (200 – 299)
Redirection messages (300 – 399)
Client error responses (400 – 499)
Server error responses (500 – 599)

mongoose-paginate-v2
bcrypt -> for hashing passwords
pre -> middleware

🔐 What is JWT?
JWT (JSON Web Token) is a secure way to transmit information between two parties — like a client and a server — in the form of a digitally signed token.

✅ It is commonly used for:
Authentication

Authorization

📦 Structure of a JWT
A JWT has three parts, separated by dots (.):

php-template
Copy
Edit
<Header>.<Payload>.<Signature>
1. Header (Metadata)
Contains info about the type of token and signing algorithm.

json
Copy
Edit
{
  "alg": "HS256",
  "typ": "JWT"
}
2. Payload (Data)
Contains the actual information or claims (like user ID, role, etc.)

json
Copy
Edit
{
  "userId": "12345",
  "role": "admin"
}
3. Signature (Security)
Used to verify the token wasn’t changed. It's created using the header + payload and a secret key.

💡 Real-World Analogy
Imagine JWT as a movie ticket:

🎟️ The ticket (JWT) has information about you and your seat.

✅ The cinema (server) checks it and lets you in — without asking for your ID every time.

🔒 It has a signature or barcode (signature) that the cinema can verify.

🧪 How JWT Works in Web Apps
🧾 Step-by-step flow:
Login: User logs in with email & password.

Server generates JWT: After verifying the user, server creates and sends a JWT to the user.

Client stores token: Usually in localStorage or cookie.

User makes requests: The client sends JWT in the Authorization header.

Server verifies JWT: If it's valid, user is allowed; otherwise, denied.



🍪 Cookies
Definition: Small pieces of data stored in the user’s browser.

Purpose: Remember user preferences, session IDs, login info, etc.

Created By: Server (usually), but can also be set by JavaScript.

✅ Key Characteristics:
Stored on the client-side (browser)

Automatically sent with every HTTP request to the domain

Can be made secure: HttpOnly, Secure, SameSite

💡 Example:
http
Copy
Edit
Set-Cookie: sessionId=abc123; HttpOnly; Secure
🛎️ Sessions
Definition: A mechanism to store user data on the server between HTTP requests.

Purpose: Keep track of logged-in users, shopping carts, etc.

✅ Key Characteristics:
Stored on the server-side

Identified by a session ID (usually sent to the client as a cookie)

More secure than storing everything in cookies

🧠 Real-World Analogy:
Imagine you go to a hotel:

Cookie = Your keycard. It stores your room number.

Session = The hotel's database. It knows everything about your stay (how long, your preferences, etc.).

🔄 How They Work Together:
You log in.

Server creates a session, stores your info (e.g., user ID).

Server sends back a cookie with a sessionId.

On every request, your browser sends the sessionId cookie.

Server uses that sessionId to retrieve your data from its session store.

✅ Summary:
Feature	Cookies	Sessions
Stored on	Client (browser)	Server
Size limit	~4KB	Can be large
Security	Can be vulnerable if not secured	Safer (data not exposed to client)
Use case	Small data, session ID	User login state, preferences



🔄 What Are Aggregation Pipelines in MongoDB?
An aggregation pipeline is a MongoDB framework that allows you to transform, filter, and analyze documents in a collection through a series of stages, much like a data processing pipeline.

✅ Key Concepts
Think of it as a data flow, where each stage processes documents and passes them to the next.

Each stage is an operation like filtering, grouping, sorting, or calculating.

Used for complex queries, analytics, data summarization, and reporting.

🧱 Common Stages in the Pipeline
Stage	Description
$match	Filters documents (like a WHERE clause in SQL)
$group	Groups documents and can calculate aggregates (like SUM, AVG, etc.)
$sort	Sorts documents
$project	Selects specific fields or transforms them
$limit	Limits the number of output documents
$skip	Skips a specified number of documents
$lookup	Joins documents from another collection
$unwind	Deconstructs arrays into multiple documents

🧠 Real-World Example
Say you have an orders collection:

json
Copy
Edit
{
  "item": "Laptop",
  "price": 1000,
  "quantity": 2,
  "category": "Electronics"
}
You want to know the total sales per category.

js
Copy
Edit
db.orders.aggregate([
  {
    $group: {
      _id: "$category",
      totalSales: { $sum: { $multiply: ["$price", "$quantity"] } }
    }
  }
])
🧾 Result:

json
Copy
Edit
[
  { "_id": "Electronics", "totalSales": 2000 }
]
🧰 Why Use Aggregation Pipelines?
Perform data analytics inside MongoDB — no need to fetch and process in app code.

Efficient and fast for large-scale operations.

Supports complex operations like filtering, reshaping, joining, and aggregating.

// for file handling in backend 
packages we use -> multer  , express-file-upload


00:03 File upload is mainly handled by the back end engineers
01:52 The method for uploading files in the backend depends on project size, calculations, and file handling.
05:55 Multer is a commonly used package for file uploading in the industry.
07:42 Spelling mistake in the stack was corrected and minor bug fixed
11:35 Upload files to the server using Cloudinary
13:17 Uploading and managing files in backend using Multer
17:05 Upload a file in backend using Multer
19:05 Upload a local file in backend using Multer
22:33 Upload a file in the backend and print a success message
24:29 The 'unlink' function is used to remove locally saved temporary files in case of failed upload operations
27:47 Multer is a middleware used for file uploading in the backend.
29:32 You can choose between disk storage and memory storage for uploading files in the backend using Multer.
32:47 Naming the file with a unique ID
34:26 Configuring the file upload using Multer
37:50 Learn how to upload files in the backend using Multer.


✅ 1. URI (Uniform Resource Identifier)
A URI is a string that identifies a resource either by location, name, or both.

🔹 It can be either a URL or a URN.

📘 Example:

bash
Copy
Edit
https://example.com/page.html   ← URI (because it's a URL)
urn:isbn:0451450523            ← URI (because it's a URN)
✅ 2. URL (Uniform Resource Locator)
A URL is a specific type of URI that provides the location of a resource on the Internet.

🔹 It tells where the resource is and how to retrieve it (via HTTP, FTP, etc.).

📘 Example:

arduino
Copy
Edit
https://www.example.com/index.html
ftp://files.example.com/file.txt
Scheme (https, ftp)

Host (www.example.com)

Path (/index.html)

✅ URL is always a URI.

✅ 3. URN (Uniform Resource Name)
A URN is a type of URI that names a resource without describing its location.

🔹 It’s like a permanent identifier, similar to an ISBN for books.

📘 Example:

makefile
Copy
Edit
urn:isbn:0451450523
urn:uuid:123e4567-e89b-12d3-a456-426614174000
❌ You cannot fetch a URN directly from the web—it doesn’t tell you where the resource lives.

🧠 Summary Table
Term	Stands For	Uniquely Identifies	Locates Resource	Example
URI	Uniform Resource Identifier	✅ Yes	✅ Maybe	https://example.com, urn:isbn:0451
URL	Uniform Resource Locator	✅ Yes	✅ Yes	https://example.com/page.html
URN	Uniform Resource Name	✅ Yes	❌ No	urn:isbn:0451450523

💡 Real-World Analogy:
URI = A person's full identity (name + address)

URL = Their address (where to find them)

URN = Their name or ID number (a label not tied to location)


💡 What is Postman?
Postman is a free API testing tool that developers use to send HTTP requests (like GET, POST, PUT, DELETE) to a server and view the responses easily.

It acts like a client (like your browser or app), helping you communicate with your backend (like Express or Django) without needing to write frontend code.



🌐 Real-World Example: Netflix
Scenario:
You log in to Netflix on your laptop. You start watching a show. Here’s how access and refresh tokens work behind the scenes:

Login:

You enter your credentials.

Netflix verifies them and returns:

An access token (valid for 1 hour)

A refresh token (valid for 30 days)

Watching a Show:

Every time you request a new episode, your browser sends the access token to Netflix's server.

Netflix verifies the token and serves the video.

After 1 Hour:

Your access token expires.

Without a refresh token: you'd need to log in again.

With a refresh token:

The app sends the refresh token to Netflix.

Netflix verifies it and issues a new access token.

You continue watching seamlessly without interruption.

🛡️ Security Measures with Refresh Tokens
Stored securely: e.g., in HTTP-only cookies to prevent XSS attacks.

Rotation: Refresh tokens are sometimes rotated after use to prevent reuse.

Revocation: If suspicious activity is detected, refresh tokens can be invalidated server-side.


 Why Not Just Use Long-Lived Access Tokens?
You could. But it introduces serious security risks:

If an attacker steals it, they have access until it expires.

If there's no refresh mechanism, you'd have to revoke and track tokens manually, which is hard.


This is why refresh tokens exist: they let you combine short access with long sessions.

we can also create an array in the users model to store the subscribers of the channel but since it can be large so we cannot use array because a single deletion from array can increase complexity
## Understanding the Subscription Schema
### Fields:
    - Subscriber
    - Channel
- There are two things to be understood first, first is a channel which needs to be subrcibed, and other is a user who will subscribe.
- Now any time we we would either require to find, how many people have subsrribed to a channel, or how many channels a user has subscribed to.
- This implies that, each subscriber should have the list of channels subscribed to, and each channel should have list of all its subscribers.
- To do this perfectly, we can create a separate model, where each time we will have a document(entry) in it, which will refer to a channel, and a subscriber.
- Now by doing this, whenever we need to find the subscribers count of a channel, we can count the number of documents where that channel is present, and obviosuly we are adding a document when a new subscriber is subscribing to the channel.
- And when we want to know that, how many channels a user has subscribed to, we will simply count the number of documents where is that user is present, means he has subscribed a new channel.
- A channel will added only when it gets a new subscriber, and the user will be added only when he subscribes to a new channel.
- That is the reason we create a separate model to handle each channel, and its subscriber as a single document, to handle the the relationship between a channel and a user and vice versa.